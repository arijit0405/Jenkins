pipeline {
    agent any

    environment {
        ERROR_COUNT = 0  // Default value for error count
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Run App') {
            steps {
                script {
                    // Run the Python script and capture the output
                    def result = bat(script: 'python project-log-monitor\\log_parser.py', returnStdout: true).trim()
                    
                    // Parse the result to get the error count (assuming the script prints it)
                    // For example, the script might print something like "Total errors: 5"
                    def matcher = result =~ /Total errors:\s*(\d+)/
                    if (matcher) {
                        ERROR_COUNT = matcher[0][1] // Capture the error count from the output
                    }
                }
            }
        }

        stage('Run Unit Tests') {
            steps {
                bat 'python project-log-monitor\\test_log_parser.py'
            }
        }

        stage('Result') {
            steps {
                script {
                    // Print the success message and the error count
                    echo "Build Success!"
                    echo "Total errors found: ${ERROR_COUNT}"
                }
            }
        }
    }

    post {
        success {
            script {
                withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                    def repo = "arijit0405/jenkins"
                    def featureBranch = "feature1"
                    def mainBranch = "main"
                    def prTitle = "Automatic PR from ${featureBranch} to ${mainBranch}"

                    bat """
                    curl -X POST -H "Authorization: token %GITHUB_TOKEN%" ^
                    -H "Accept: application/vnd.github+json" ^
                    https://api.github.com/repos/${repo}/pulls ^
                    -d \"{\\\"title\\\": \\\"${prTitle}\\\", \\\"head\\\": \\\"${featureBranch}\\\", \\\"base\\\": \\\"${mainBranch}\\\", \\\"body\\\": \\\"Automated PR from Jenkins on successful build\\\"}\"
                    """
                }
            }
        }
    }
}
