pipeline {
    agent any

    environment {
        ERROR_COUNT = 0  // Default value for error count
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Verify File Exists') {
            steps {
                script {
                    def fileExists = fileExists('project-log-monitor/demo.log')
                    if (!fileExists) {
                        error "File demo.log does not exist in the repository."
                    }
                    echo "File demo.log found!"
                }
            }
        }

        stage('Run App') {
            steps {
                dir('project-log-monitor') {
                    script {
                        // Run the Python script and capture the output
                        def result = bat(script: 'python log_parser.py', returnStdout: true).trim()
                        echo "Script Output:\n${result}"

                        // Extract error count
                        def matcher = result =~ /Total 'error' lines found:\s*(\d+)/
                        if (matcher) {
                            env.ERROR_COUNT = matcher[0][1]
                        } else {
                            echo "Could not parse error count."
                        }
                    }
                }
            }
        }

        stage('Run Unit Tests') {
            steps {
                dir('project-log-monitor') {
                    bat 'python test_log_parser.py'
                }
            }
        }

        stage('Result') {
            steps {
                script {
                    echo "Build Success!"
                    echo "Total errors found: ${env.ERROR_COUNT}"
                }
            }
        }
    }

    post {
        success {
            script {
                withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                    def repo = "arijit0405/jenkins"
                    def featureBranch = "feature1"
                    def mainBranch = "main"
                    def prTitle = "Automatic PR from ${featureBranch} to ${mainBranch}"

                    bat """
                    curl -X POST -H "Authorization: token %GITHUB_TOKEN%" ^
                    -H "Accept: application/vnd.github+json" ^
                    https://api.github.com/repos/${repo}/pulls ^
                    -d "{\\"title\\": \\"${prTitle}\\", \\"head\\": \\"${featureBranch}\\", \\"base\\": \\"${mainBranch}\\", \\"body\\": \\"Automated PR from Jenkins on successful build\\"}"
                    """
                }
            }
        }
    }
}
